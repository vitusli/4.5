from . import _base

class BConstraintType(_base.BStaticEnum):

	CAMERA_SOLVER = dict(n='Camera Solver', d='Camera Solver')
	FOLLOW_TRACK = dict(n='Follow Track', d='Follow Track')
	OBJECT_SOLVER = dict(n='Object Solver', d='Object Solver')
	COPY_LOCATION = dict(n='Copy Location', d='Copy the location of a target (with an optional offset), so that they move together')
	COPY_ROTATION = dict(n='Copy Rotation', d='Copy the rotation of a target (with an optional offset), so that they rotate together')
	COPY_SCALE = dict(n='Copy Scale', d='Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount')
	COPY_TRANSFORMS = dict(n='Copy Transforms', d='Copy all the transformations of a target, so that they move together')
	LIMIT_DISTANCE = dict(n='Limit Distance', d='Restrict movements to within a certain distance of a target (at the time of constraint evaluation only)')
	LIMIT_LOCATION = dict(n='Limit Location', d='Restrict movement along each axis within given ranges')
	LIMIT_ROTATION = dict(n='Limit Rotation', d='Restrict rotation along each axis within given ranges')
	LIMIT_SCALE = dict(n='Limit Scale', d='Restrict scaling along each axis with given ranges')
	MAINTAIN_VOLUME = dict(n='Maintain Volume', d='Compensate for scaling one axis by applying suitable scaling to the other two axes')
	TRANSFORM = dict(n='Transformation', d='Use one transform property from target to control another (or same) property on owner')
	TRANSFORM_CACHE = dict(n='Transform Cache', d='Look up the transformation matrix from an external file')
	CLAMP_TO = dict(n='Clamp To', d='Restrict movements to lie along a curve by remapping location along curve’s longest axis')
	DAMPED_TRACK = dict(n='Damped Track', d='Point towards a target by performing the smallest rotation necessary')
	IK = dict(n='Inverse Kinematics', d='Control a chain of bones by specifying the endpoint target (Bones only)')
	LOCKED_TRACK = dict(n='Locked Track', d='Rotate around the specified (‘locked’) axis to point towards a target')
	SPLINE_IK = dict(n='Spline IK', d='Align chain of bones along a curve (Bones only)')
	STRETCH_TO = dict(n='Stretch To', d='Stretch along Y-Axis to point towards a target')
	TRACK_TO = dict(n='Track To', d='Legacy tracking constraint prone to twisting artifacts')
	ACTION = dict(n='Action', d='Use transform property of target to look up pose for owner from an Action')
	ARMATURE = dict(n='Armature', d='Apply weight-blended transformation from multiple bones like the Armature modifier')
	CHILD_OF = dict(n='Child Of', d='Make target the ‘detachable’ parent of owner')
	FLOOR = dict(n='Floor', d='Use position (and optionally rotation) of target to define a ‘wall’ or ‘floor’ that the owner can not cross')
	FOLLOW_PATH = dict(n='Follow Path', d='Use to animate an object/bone following a path')
	PIVOT = dict(n='Pivot', d='Change pivot point for transforms (buggy)')
	SHRINKWRAP = dict(n='Shrinkwrap', d='Restrict movements to surface of target mesh')
