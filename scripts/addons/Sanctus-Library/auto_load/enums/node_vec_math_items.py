from . import _base

class BNodeVecMath(_base.BStaticEnum):

	ADD = dict(n='Add', d='A + B')
	SUBTRACT = dict(n='Subtract', d='A - B')
	MULTIPLY = dict(n='Multiply', d='Entry-wise multiply')
	DIVIDE = dict(n='Divide', d='Entry-wise divide')
	MULTIPLY_ADD = dict(n='Multiply Add', d='A * B + C')
	CROSS_PRODUCT = dict(n='Cross Product', d='A cross B')
	PROJECT = dict(n='Project', d='Project A onto B')
	REFLECT = dict(n='Reflect', d='Reflect A around the normal B. B doesnâ€™t need to be normalized')
	REFRACT = dict(n='Refract', d='For a given incident vector A, surface normal B and ratio of indices of refraction, Ior, refract returns the refraction vector, R')
	FACEFORWARD = dict(n='Faceforward', d='Orients a vector A to point away from a surface B as defined by its normal C. Returns (dot(B, C) < 0) ? A : -A')
	DOT_PRODUCT = dict(n='Dot Product', d='A dot B')
	DISTANCE = dict(n='Distance', d='Distance between A and B')
	LENGTH = dict(n='Length', d='Length of A')
	SCALE = dict(n='Scale', d='A multiplied by Scale')
	NORMALIZE = dict(n='Normalize', d='Normalize A')
	ABSOLUTE = dict(n='Absolute', d='Entry-wise absolute')
	MINIMUM = dict(n='Minimum', d='Entry-wise minimum')
	MAXIMUM = dict(n='Maximum', d='Entry-wise maximum')
	FLOOR = dict(n='Floor', d='Entry-wise floor')
	CEIL = dict(n='Ceil', d='Entry-wise ceil')
	FRACTION = dict(n='Fraction', d='The fraction part of A entry-wise')
	MODULO = dict(n='Modulo', d='Entry-wise modulo using fmod(A,B)')
	WRAP = dict(n='Wrap', d='Entry-wise wrap(A,B)')
	SNAP = dict(n='Snap', d='Round A to the largest integer multiple of B less than or equal A')
	SINE = dict(n='Sine', d='Entry-wise sin(A)')
	COSINE = dict(n='Cosine', d='Entry-wise cos(A)')
	TANGENT = dict(n='Tangent', d='Entry-wise tan(A)')
