"""
• Script License: 

    This python script file is licensed under GPL 3.0
    
    This program is free software; you can redistribute it and/or modify it under 
    the terms of the GNU General Public License as published by the Free Software
    Foundation; either version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    See the GNU General Public License for more details.
    
    See full license on 'https://www.gnu.org/licenses/gpl-3.0.en.html#license-text'

• Additonal Information: 

    The components in this archive are a mere aggregation of independent works. 
    The GPL-licensed scripts included here serve solely as a control and/or interface for 
    the Geo-Scatter geometry-node assets.

    The content located in the 'PluginFolder/non_gpl/' directory is NOT licensed under 
    the GPL. For details, please refer to the LICENSES.txt file within this folder.

    The non-GPL components and assets can function fully without the scripts and vice versa. 
    They do not form a derivative work, and are distributed together for user convenience.

    Redistribution, modification, or unauthorized use of the content in the 'non_gpl' folder,
    including .blend files or image files, is prohibited without prior written consent 
    from BD3D DIGITAL DESIGN, SLU.
        
• Trademark Information:

    Geo-Scatter® name & logo is a trademark or registered trademark of “BD3D DIGITAL DESIGN, SLU” 
    in the U.S. and/or European Union and/or other countries. We reserve all rights to this trademark. 
    For further details, please review our trademark and logo policies at “www.geoscatter.com/legal”. The 
    use of our brand name, logo, or marketing materials to distribute content through any non-official
    channels not listed on “www.geoscatter.com/download” is strictly prohibited. Such unauthorized use 
    falsely implies endorsement or affiliation with third-party activities, which has never been granted. We 
    reserve all rights to protect our brand integrity & prevent any associations with unapproved third parties.
    You are not permitted to use our brand to promote your unapproved activities in a way that suggests official
    endorsement or affiliation. As a reminder, the GPL license explicitly excludes brand names from the freedom,
    our trademark rights remain distinct and enforceable under trademark laws.

"""
# A product of “BD3D DIGITAL DESIGN, SLU”
# Authors:
# (c) 2024 Dorian Borremans

#####################################################################################################
# 
# ooooooooo.                                                                    ooo        ooooo                    oooo
# `888   `Y88.                                                                  `88.       .888'                    `888
#  888   .d88'  .ooooo.  ooo. .oo.  .oo.    .ooooo.  oooo    ooo  .ooooo.        888b     d'888   .oooo.    .oooo.o  888  oooo
#  888ooo88P'  d88' `88b `888P"Y88bP"Y88b  d88' `88b  `88.  .8'  d88' `88b       8 Y88. .P  888  `P  )88b  d88(  "8  888 .8P'
#  888`88b.    888ooo888  888   888   888  888   888   `88..8'   888ooo888       8  `888'   888   .oP"888  `"Y88b.   888888.
#  888  `88b.  888    .o  888   888   888  888   888    `888'    888    .o       8    Y     888  d8(  888  o.  )88b  888 `88b.
# o888o  o888o `Y8bod8P' o888o o888o o888o `Y8bod8P'     `8'     `Y8bod8P'      o8o        o888o `Y888""8o 8""888P' o888o o888o
# 
#####################################################################################################


import bpy

from .. translations import translate



# oooooooooooo                                       .    o8o
# `888'     `8                                     .o8    `"'
#  888         oooo  oooo  ooo. .oo.    .ooooo.  .o888oo oooo   .ooooo.  ooo. .oo.
#  888oooo8    `888  `888  `888P"Y88b  d88' `"Y8   888   `888  d88' `88b `888P"Y88b
#  888    "     888   888   888   888  888         888    888  888   888  888   888
#  888          888   888   888   888  888   .o8   888 .  888  888   888  888   888
# o888o         `V88V"V8P' o888o o888o `Y8bod8P'   "888" o888o `Y8bod8P' o888o o888o



def general_mask_remove(obj_name=None ,mask_idx=None):
    """General Remove Function used by almost all mask modules in mask_types"""

    o = bpy.data.objects.get(obj_name)
    if o is None: 
        return None 

    masks = o.scatter5.mask_systems
    i     = mask_idx
    m     = masks[i]

    #remove related modifiers/objects/collection potentially generated by this mask
    #remove modifier related to this mask?         
    if (m.mod_list!=""):
        for modname in m.mod_list.split("_!#!_"):
            if modname in o.modifiers:
                o.modifiers.remove(o.modifiers[modname])
    #remove objects related to this mask?                    
    if (m.obj_list!=""):
        for objname in m.obj_list.split("_!#!_"):
            if objname in bpy.data.objects:
                bpy.data.objects.remove(bpy.data.objects[objname])
    #remove collection related to this mask?                    
    if (m.coll_list!=""):
        for collname in m.coll_list.split("_!#!_"):
            if collname in bpy.data.collections:
                bpy.data.collections.remove(bpy.data.collections[collname])

    #remove mask vertex-group
    vg = o.vertex_groups.get(m.name)
    if vg is not None:
        o.vertex_groups.remove(vg)

    #remove mask from mask list
    masks.remove(i)

    #adjust active mask idx
    if (len(masks)-1)<masks.id_data.scatter5.mask_systems_idx:
        masks.id_data.scatter5.mask_systems_idx = (len(masks)-1)

    #tell blender to refresh viewport
    o.hide_viewport = not o.hide_viewport
    o.hide_viewport = not o.hide_viewport

    return None 



#   .oooooo.                                               .
#  d8P'  `Y8b                                            .o8
# 888      888 oo.ooooo.   .ooooo.  oooo d8b  .oooo.   .o888oo  .ooooo.  oooo d8b
# 888      888  888' `88b d88' `88b `888""8P `P  )88b    888   d88' `88b `888""8P
# 888      888  888   888 888ooo888  888      .oP"888    888   888   888  888
# `88b    d88'  888   888 888    .o  888     d8(  888    888 . 888   888  888
#  `Y8bood8P'   888bod8P' `Y8bod8P' d888b    `Y888""8o   "888" `Y8bod8P' d888b
#               888
#              o888o


#This op will just call the remove() function of a given mask module

class SCATTER5_OT_remove_mask(bpy.types.Operator):

    bl_idname      = "scatter5.remove_mask"
    bl_label       = translate("Remove a mask")
    bl_description = translate("Remove a mask")
    bl_options     = {'INTERNAL','UNDO'}

    mask_type : bpy.props.StringProperty()
    mask_idx  : bpy.props.IntProperty()

    @classmethod
    def poll(cls, context, ):
        scat_scene = bpy.context.scene.scatter5
        emitter = scat_scene.emitter
        masks = emitter.scatter5.mask_systems
        if len(masks)==0:
            return False
        return True
        
    def execute(self, context):

        from . import mask_type
        exec(f"mask_type.{self.mask_type}.remove({self.mask_idx})")

        return {'FINISHED'}




classes = (

    SCATTER5_OT_remove_mask,

    )
